---
description: # Architecture Rules
globs: 
---
# Architecture Rules

## **ðŸ”¹ Core Architecture**
- **Follow Next.js 14 App Router patterns**.
- **Use Supabase for all database storage** (JDs, Jobs, AI Insights, AI CVs).
- **Maintain modular API endpoints** for:
  - `/api/job-descriptions/` (AI JD Generator)
  - `/api/community-posting/` (Slack/Discord syndication)
  - `/api/salary-benchmarking/` (Glassdoor API, GPT-based retrieval)
  - `/api/cv-generation/` (AI CV Generator)
  - `/api/job-spec-matching/` (AI-driven job spec vs. CV analysis)
  - `/api/training-recommendations/` (AI-based skill-gap analysis & upskilling)
  - `/api/gumloop-job-posting/` (Automated job distribution via Gumloop)
  - `/api/gumloop-candidate-screening/` (AI-powered chatbot pre-screening)
  - `/api/gumloop-lead-generation/` (Automated recruiter outreach)
  - **OpenAI GPT-4.5 API** (JD & AI CV Generation)
  - **Gumloop AI Automation** (Automates job postings, workflows, and AI-powered hiring processes)
  - **Pinecone** (Fast AI skills matching & AI-driven job-to-CV analysis)
  - **Slack & Discord API** (Job Posting Automation)
  - **Python FastAPI Backend** (Handles AI CV processing, JD matching, AI-driven skill recommendations)

---

## **ðŸ”¹ Final Folder Structure**

ai-workforce-navigator-v2/ â”œâ”€â”€ .cursor/ â”‚ â”œâ”€â”€ rules/ â”‚ â”‚ â”œâ”€â”€ PRD.mdc # PRD for Cursor AI reference â”‚ â”‚ â”œâ”€â”€ architecture-rules.mdc â”‚ â”‚ â”œâ”€â”€ developmentflow.mdc â”‚ â”‚ â”œâ”€â”€ apiintegration.mdc â”‚ â”‚ â”œâ”€â”€ codeorganisation.mdc â”‚ â”‚ â”œâ”€â”€ statemanagement.mdc â”‚ â”‚ â”œâ”€â”€ stylingstandards.mdc â”‚ â”‚ â”œâ”€â”€ testingrequirements.mdc â”œâ”€â”€ src/ â”‚ â”œâ”€â”€ app/ â”‚ â”‚ â”œâ”€â”€ jd-generator/ # JD Generator UI â”‚ â”‚ â”œâ”€â”€ ai-cv-generator/ # AI CV Generator UI â”‚ â”‚ â”œâ”€â”€ job-board/ # AI Job Board â”‚ â”‚ â”œâ”€â”€ hiring-insights/ # AI Hiring Trends Dashboard â”‚ â”‚ â”œâ”€â”€ gumloop-automation/ # Gumloop-based workflows â”‚ â”œâ”€â”€ backend-node/ # Node.js APIs â”‚ â”‚ â”œâ”€â”€ routes/ â”‚ â”‚ â”œâ”€â”€ controllers/ â”‚ â”‚ â”œâ”€â”€ utils/ â”‚ â”œâ”€â”€ backend-python/ # Python AI processing â”‚ â”‚ â”œâ”€â”€ main.py # FastAPI entry point â”‚ â”‚ â”œâ”€â”€ requirements.txt â”‚ â”‚ â”œâ”€â”€ services/ â”‚ â”‚ â”‚ â”œâ”€â”€ cv_parser.py â”‚ â”‚ â”‚ â”œâ”€â”€ job_spec_analyzer.py â”‚ â”‚ â”‚ â”œâ”€â”€ course_recommender.py â”‚ â”œâ”€â”€ integrations/ â”‚ â”‚ â”œâ”€â”€ gumloop/ # Gumloop API integration â”‚ â”‚ â”‚ â”œâ”€â”€ job_posting.py â”‚ â”‚ â”‚ â”œâ”€â”€ candidate_screening.py â”‚ â”‚ â”‚ â”œâ”€â”€ lead_generation.py â”‚ â”œâ”€â”€ components/ â”‚ â”‚ â”œâ”€â”€ features/ â”‚ â”‚ â”‚ â”œâ”€â”€ jd-generator/ â”‚ â”‚ â”‚ â”œâ”€â”€ ai-cv-generator/ â”‚ â”‚ â”‚ â”œâ”€â”€ job-board/ â”‚ â”‚ â”‚ â”œâ”€â”€ hiring-insights/ â”‚ â”‚ â”‚ â”œâ”€â”€ gumloop-automation/ â”‚ â”œâ”€â”€ lib/ â”‚ â”‚ â”œâ”€â”€ supabase/ â”‚ â”œâ”€â”€ pages/ â”‚ â”œâ”€â”€ public/ â”‚ â”œâ”€â”€ styles/ â”‚ â”œâ”€â”€ types/   
---

## **ðŸ”¹ Best Practices**
- **Use Gumloop for AI-powered workflow automation** (job postings, candidate screening, recruiter outreach).
- **Keep components atomic and reusable** â†’ Each feature must be independent.
- **Follow clean data flow patterns** â†’ Maintain **strict separation of concerns**.
- **Use a microservices approach** â†’  
  - **Node.js** for general API handling (Job Board, JD Generator).  
  - **Python FastAPI** for AI-heavy tasks (AI CV Parsing, AI Training Recommendations).  
  - **Gumloop for no-code workflow automation** (handles job postings, AI chatbots, and talent matching).  
- **Ensure all AI-powered features integrate seamlessly with Slack, Discord, and external job posting APIs.**
- **Maintain AI-generated job & CV content in a structured, ATS-friendly format.**
- **Automate job & candidate outreach via Gumloop workflows for efficiency.**

---


