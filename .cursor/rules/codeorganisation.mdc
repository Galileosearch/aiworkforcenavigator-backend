---
description: Code Orgnisation
globs: 
---
# Code Organisation Rules

## **ðŸ”¹ Core Code Structure**
- **No files should be placed outside the defined structure.**
- **Component-first architecture** â†’ All UI elements must be modular & reusable.
- **Follow a feature-based organization:**
  - `src/components/features/` contains modular features (JD Generator, AI CV Generator, Community Posting, etc.).
  - `src/app/api/` handles API calls.
  - `src/lib/` stores shared utilities (Supabase, GPT integrations, Gumloop API handlers).
  - **All navigation headers must be unified across sections.**
  - **SaaS-level UI with micro-interactions & hover effects.**
  - **Gumloop workflows must be modular and event-driven.**

---

## **ðŸ”¹ Final Folder Structure**

ai-workforce-navigator-v2/ â”œâ”€â”€ .cursor/ â”‚ â”œâ”€â”€ rules/ â”‚ â”‚ â”œâ”€â”€ PRD.mdc # PRD for Cursor AI reference â”‚ â”‚ â”œâ”€â”€ architecture-rules.mdc â”‚ â”‚ â”œâ”€â”€ developmentflow.mdc â”‚ â”‚ â”œâ”€â”€ apiintegration.mdc â”‚ â”‚ â”œâ”€â”€ codeorganisation.mdc â”‚ â”‚ â”œâ”€â”€ statemanagement.mdc â”‚ â”‚ â”œâ”€â”€ stylingstandards.mdc â”‚ â”‚ â”œâ”€â”€ testingrequirements.mdc â”œâ”€â”€ src/ â”‚ â”œâ”€â”€ app/ â”‚ â”‚ â”œâ”€â”€ jd-generator/ # JD Generator UI â”‚ â”‚ â”œâ”€â”€ ai-cv-generator/ # AI CV Generator UI â”‚ â”‚ â”œâ”€â”€ job-board/ # AI Job Board â”‚ â”‚ â”œâ”€â”€ hiring-insights/ # AI Hiring Trends Dashboard â”‚ â”‚ â”œâ”€â”€ gumloop-automation/ # Gumloop-based workflows â”‚ â”œâ”€â”€ backend-node/ # Node.js APIs â”‚ â”‚ â”œâ”€â”€ routes/ â”‚ â”‚ â”œâ”€â”€ controllers/ â”‚ â”‚ â”œâ”€â”€ utils/ â”‚ â”œâ”€â”€ backend-python/ # Python AI processing â”‚ â”‚ â”œâ”€â”€ main.py # FastAPI entry point â”‚ â”‚ â”œâ”€â”€ requirements.txt â”‚ â”‚ â”œâ”€â”€ services/ â”‚ â”‚ â”‚ â”œâ”€â”€ cv_parser.py â”‚ â”‚ â”‚ â”œâ”€â”€ job_spec_analyzer.py â”‚ â”‚ â”‚ â”œâ”€â”€ course_recommender.py â”‚ â”œâ”€â”€ integrations/ â”‚ â”‚ â”œâ”€â”€ gumloop/ # Gumloop API integration â”‚ â”‚ â”‚ â”œâ”€â”€ job_posting.py â”‚ â”‚ â”‚ â”œâ”€â”€ candidate_screening.py â”‚ â”‚ â”‚ â”œâ”€â”€ lead_generation.py â”‚ â”œâ”€â”€ components/ â”‚ â”‚ â”œâ”€â”€ features/ â”‚ â”‚ â”‚ â”œâ”€â”€ jd-generator/ â”‚ â”‚ â”‚ â”œâ”€â”€ ai-cv-generator/ â”‚ â”‚ â”‚ â”œâ”€â”€ job-board/ â”‚ â”‚ â”‚ â”œâ”€â”€ hiring-insights/ â”‚ â”‚ â”‚ â”œâ”€â”€ gumloop-automation/ â”‚ â”œâ”€â”€ lib/ â”‚ â”‚ â”œâ”€â”€ supabase/ â”‚ â”œâ”€â”€ pages/ â”‚ â”œâ”€â”€ public/ â”‚ â”œâ”€â”€ styles/ â”‚ â”œâ”€â”€ types/


---

## **ðŸ”¹ Code Best Practices**
- **Maintain Types for All Implementations**  
  - TypeScript must be enforced throughout the project.  
- **Shared Utilities Live in `/lib/`**  
  - Centralized helper functions (Supabase storage, GPT integrations, Gumloop API calls).  
- **Follow Atomic Design Principles**  
  - Keep UI components small, reusable, and organized.  
- **Use Feature-Based Structure**  
  - Organize code into independent, reusable feature modules.  
- **Separate AI-heavy processing into Python (`backend-python/`)**  
  - Optimize for performance by keeping AI-heavy processes separate from the frontend and Node.js APIs.
- **Use Gumloop for no-code workflow automation**  
  - Handle job postings, AI chatbots, and talent matching workflows via Gumloop.

---


